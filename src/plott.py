from plot_methods import *


def initial_text():
    # Title and description
    st.title('Construction of causal graphs')



def sidebar():

    # Sidebar options
    sidebar= st.sidebar
    sidebar.title('Graph options')
    file= sidebar.file_uploader('Select a file')

    option = sidebar.selectbox('Select the graph type',
                            ('Kamada Kawai', 'Shell','Random', 'Spiral', 'Circular', 'Spring'))
    
    option_info= {
        'Kamada Kawai': '''lays out the nodes according to a modified Kamada-Kawai 
            algorithm. The Kamada-Kawai graph layout attempts to position nodes on the 
            space so that the geometric (Euclidean) distance between them is as close as 
            possible to the graph-theoretic (path) distance between them.''',

        'Shell': 'position nodes in concentric circles.',

        'Random': '''position nodes uniformly at random in the unit square. For every 
            node, a position is generated by choosing each of dim coordinates uniformly at 
            random on the interval [0.0, 1.0).''',

        'Spiral': 'position nodes on a spiral.',

        'Circular': 'position nodes on a circle.',
        'Spring':''
    }

    sidebar.markdown(f'**{option}** {option_info[option]}')

    return file, option



def pyvis_graph(G: Graph):
    st.markdown('### Pyvis Plott')
    st.markdown('')
    # Initiate PyVis network object
    net = Network('600px')
    # Take Networkx graph and translate it to a PyVis graph format
    net.from_nx(G)
    # Generate network with specific layout settings
    net.repulsion(node_distance=50, central_gravity=0.70,
                        spring_length=50, spring_strength=0.20,
                        damping=0.2)


    # Load HTML file in HTML component for display on Streamlit page
    components.html(net.generate_html(), height=610)



def matplot_graph(G: Graph, option: str):
    # plot with matplotlib
    fig, _= plt.subplots()

    pltdict = {
        'Kamada Kawai': nx.kamada_kawai_layout,
        'Shell': nx.shell_layout,
        'Random': nx.random_layout,
        'Spiral': nx.spiral_layout,
        'Circular': nx.circular_layout,
        'Spring': nx.spring_layout
    }

    nx.draw(G, pltdict[option](G), with_labels=True, )
    st.pyplot(fig)



def graphviz_plott():
    with st.expander("See explanation"):
        #plot with graphviz
        # Create a graphlib graph object
        graph = graphviz.Digraph()
        graph.attr('node', shape='circle')
        graph.attr('node', style='filled')
        graph.attr('node', fillcolor='lightblue2')
        graph.attr('node', color='blue')
        graph.attr('node', fontcolor='black')
        graph.attr('node', fontsize='20')
        graph.attr('node', width='0.5')
        graph.attr('node', height='0.5')
        graph.attr('node', fixedsize='true')

        graph.attr('edge', color='blue')
        graph.attr('edge', arrowsize='1')
        graph.attr('edge', penwidth='3')

        for a in G.edges:
            graph.edge(str(a[0]), str(a[1]))

        st.graphviz_chart(graph)




initial_text()
file, option= sidebar()

if file:
    G= make_graph(file)
    pyvis_graph(G)
    matplot_graph(G, option)